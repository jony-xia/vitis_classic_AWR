#include "xspips.h"
#include "xparameters.h"
#include "host.h"

#define SPI0_DEVICE_ID   XPAR_XSPIPS_0_BASEADDR
#define SPI1_DEVICE_ID   XPAR_XSPIPS_1_BASEADDR

static XSpiPs Spi0, Spi1;

int32_t Host_spiOpen(uint8_t deviceIndex, void **handle)
{
    XSpiPs_Config *Config;
    int status;

    if(deviceIndex == 0) {
        Config = XSpiPs_LookupConfig(SPI0_DEVICE_ID);
        status = XSpiPs_CfgInitialize(&Spi0, Config, Config->BaseAddress);
        *handle = &Spi0;
    } else {
        Config = XSpiPs_LookupConfig(SPI1_DEVICE_ID);
        status = XSpiPs_CfgInitialize(&Spi1, Config, Config->BaseAddress);
        *handle = &Spi1;
    }

    if(status != XST_SUCCESS) return -1;

    XSpiPs_SetOptions(*handle, XSPIPS_MANUAL_START_OPTION |
                                XSPIPS_MASTER_OPTION |
                                XSPIPS_FORCE_SSELECT_OPTION);

    XSpiPs_SetSlaveSelect(*handle, 0);

    return 0;
}

int32_t Host_spiClose(void *handle) 
{ 
    return 0; 
}

int32_t Host_spiWrite(void *handle, uint8_t *buf, uint16_t len)
{
    XSpiPs *Spi = (XSpiPs *)handle;
    return XSpiPs_PolledTransfer(Spi, buf, NULL, len);
}

int32_t Host_spiRead(void *handle, uint8_t *buf, uint16_t len)
{
    XSpiPs *Spi = (XSpiPs *)handle;
    uint8_t dummy[512];
    return XSpiPs_PolledTransfer(Spi, dummy, buf, len);
}

